import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;

public class FastCollinearPoints {
  List<LineSegment> _lineSegmentList = new ArrayList<LineSegment>();
  Point[] _points;

  public FastCollinearPoints(Point[] points) {
    _points = points;
    find4PointCollinearSegment();
  }

  List<LineSegment> find4PointCollinearSegment() {
    if (_points.length > 2) {
      for (int i = 0; i < _points.length; i++) {
        findCollinearWithCurrentPoint(i);
      }
    }
    return _lineSegmentList;
  }

  void findCollinearWithCurrentPoint(int current) {
    Comparator<Point> comparator = _points[current].slopeOrder();
      Point[] sortedPoints = new FastCollinearPointsUtil().sortPoints(_points, comparator);
      double slopeToCompare = sortedPoints[0].slopeTo(sortedPoints[1]);
      int segmentLength = 2;
      int i = 2;
      while (i < sortedPoints.length && slopeToCompare == sortedPoints[0].slopeTo(sortedPoints[i++])) {
          segmentLength++;
      }
      if (segmentLength > 3) {
        _lineSegmentList.add(new LineSegment(sortedPoints[0], sortedPoints[i - 1]));
      }
  }

  public int numberOfSegments() {
      return _lineSegmentList.size();
  }

  public LineSegment[] segments() {
    LineSegment[] segments = new LineSegment[_lineSegmentList.size()];
    _lineSegmentList.toArray(segments);
    return segments;
  }
  public static void main(String[] args) {
    FastCollinearPointsTest.runTests();
  }

  static class FastCollinearPointsUtil {
    Point[] sortPoints(Point[] points, Comparator<Point> comparator) {
      Point[] result = new Point[points.length];
      for (int i = 0; i < points.length; i++) {
        result[i] = points[i];
      }
      Arrays.sort(result, comparator);
      return result;
    }
  }
}
